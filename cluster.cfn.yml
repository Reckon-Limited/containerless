AWSTemplateFormatVersion: 2010-09-09
Description: Test Docker deployment
Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMIID: ami-30bdce57
    ap-southeast-1:
      AMIID: ami-9f75ddfc
    ap-southeast-2:
      AMIID: ami-cf393cac
    ca-central-1:
      AMIID: ami-1b01b37f
    eu-central-1:
      AMIID: ami-10e6c8fb
    eu-west-1:
      AMIID: ami-e3fbd290
    eu-west-2:
      AMIID: ami-77f6fc13
    us-east-1:
      AMIID: ami-a58760b3
    us-east-2:
      AMIID: ami-a6e4bec3
    us-west-1:
      AMIID: ami-74cb9b14
    us-west-2:
      AMIID: ami-5b6dde3b      
Outputs:
  ClusterId:
    Description: ClusterId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-ClusterId
    Value:
      Ref: ECSCluster
  PublicSecurityGroup:
    Description: SecurityGroup
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-SecurityGroup
    Value:
      Ref: PublicSecurityGroup
Parameters:
  DesiredCapacity:
    Default: 1
    Description: Number of instances to launch in your ECS cluster.
    Type: Number
  InstanceType:
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    ConstraintDescription: Please choose a valid instance type.
    Default: t2.micro
    Description: EC2 instance type
    Type: String
  MaxSize:
    Default: 1
    Description: Maximum number of instances that can be launched in your ECS cluster.
    Type: Number
  VPCId:
    Description: Name of the stack containing a VPC with at least two subnets
    Type: AWS::EC2::VPC::Id
  VPCZoneIdentifier:
    Description: Name of the stack containing a VPC with at least two subnets
    Type: CommaDelimitedList
Resources:
  AutoScalingGroup:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      DesiredCapacity:
        Ref: DesiredCapacity
      LaunchConfigurationName:
        Ref: LaunchConfiguration
      MaxSize:
        Ref: MaxSize
      MinSize: "1"
      VPCZoneIdentifier:
        Ref: VPCZoneIdentifier
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        PauseTime: PT5M
        WillReplace: "true"
  AutoscalingRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - application-autoscaling:*
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            - ecs:DescribeServices
            - ecs:UpdateService
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service-autoscaling
    Type: AWS::IAM::Role
  EC2InstanceProfile:
    Properties:
      Path: /
      Roles:
      - Ref: ECSInstanceRole
    Type: AWS::IAM::InstanceProfile
  ECSCluster:
    Type: AWS::ECS::Cluster
  ECSInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:CreateCluster
            - ecs:DeregisterContainerInstance
            - ecs:DiscoverPollEndpoint
            - ecs:Poll
            - ecs:RegisterContainerInstance
            - ecs:StartTelemetrySession
            - ecs:Submit*
            - ecr:BatchCheckLayerAvailability
            - ecr:BatchGetImage
            - ecr:GetDownloadUrlForLayer
            - ecr:GetAuthorizationToken
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
        PolicyName: ecs-service-instance
    Type: AWS::IAM::Role
  LaunchConfiguration:
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - Ref: AWS::Region
        - AMIID
      InstanceType:
        Ref: InstanceType
      KeyName: ecs-instance
      SecurityGroups:
      - Ref: PublicSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            yum install -y aws-cfn-bootstrap

            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

            # /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ECSAutoScalingLaunchConfig --region ${AWS::Region}

            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource AutoScalingGroup --region ${AWS::Region}
    Type: AWS::AutoScaling::LaunchConfiguration
  PublicSecurityGroup:
    Properties:
      GroupDescription: ECS Public Security Group
      VpcId:
        Ref: VPCId
    Type: AWS::EC2::SecurityGroup
  PublicSecurityGroupDynamicPorts:
    Properties:
      FromPort: 31000
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId:
        Ref: PublicSecurityGroup
      ToPort: 61000
    Type: AWS::EC2::SecurityGroupIngress
  PublicSecurityGroupHTTPInbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: "80"
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      ToPort: "80"
    Type: AWS::EC2::SecurityGroupIngress
  PublicSecurityGroupHTTPSInbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: "443"
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      ToPort: "443"
    Type: AWS::EC2::SecurityGroupIngress
  PublicSecurityGroupSSHInbound:
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: "22"
      GroupId:
        Ref: PublicSecurityGroup
      IpProtocol: tcp
      ToPort: "22"
    Type: AWS::EC2::SecurityGroupIngress
